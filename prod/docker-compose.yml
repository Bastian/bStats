---
version: "3.8"

x-logging: &x-logging
  logging:
    driver: "json-file"
    options:
      max-size: "100m"

services:
  # Cluster of 3 Redis master nodes
  redis-node-1m: &redis-node
    image: "bitnami/redis-cluster:7.0"
    user: ${USERID:-0}
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "6379", "--raw", "incr", "ping"]
    volumes:
      - "./volumes/redis/redis.conf:/opt/bitnami/redis/mounted-etc/redis.conf"
      - "./volumes/redis/node-1m:/bitnami/redis/data"
    environment: &redis-node-env
      REDIS_CLUSTER_REPLICAS: "0"
      REDIS_NODES: "redis-node-1m redis-node-2m redis-node-3m"
      ALLOW_EMPTY_PASSWORD: "yes"
      REDIS_PASSWORD: ""
    <<: *x-logging
  redis-node-2m:
    <<: *redis-node
    volumes:
      - "./volumes/redis/redis.conf:/opt/bitnami/redis/mounted-etc/redis.conf"
      - "./volumes/redis/node-2m:/bitnami/redis/data"
  redis-node-3m:
    <<: *redis-node
    volumes:
      - "./volumes/redis/redis.conf:/opt/bitnami/redis/mounted-etc/redis.conf"
      - "./volumes/redis/node-3m:/bitnami/redis/data"
    depends_on:
      - redis-node-1m
      - redis-node-2m
    environment:
      <<: *redis-node-env
      REDIS_CLUSTER_CREATOR: "yes"

  # Multiple instances of the backend server
  bstats-backend-1: &bstats-backend
    build: ../bstats-backend
    restart: unless-stopped
    ulimits: &ulimits
      nofile:
        soft: 32768
        hard: 32768
    volumes:
      - "./service-account-file.json:/app/service-account-file.json"
    healthcheck:
      test: ["CMD-SHELL", "curl http://localhost:3001/software"]
      retries: 60
    depends_on: &depends_on-redis
      redis-node-1m:
        condition: service_healthy
      redis-node-2m:
        condition: service_healthy
      redis-node-3m:
        condition: service_healthy
    environment: &bstats-backend-env
      SHARD_NUMBER: "0"
      PORT: "3001"
      REDIS_USE_CLUSTER: "true"
      REDIS_HOST: "redis-node-1m"
      REDIS_PORT: "6379"
      PGHOST: "postgres"
      PGPORT: "5432"
      TOTAL_SHARDS: "6"
      WORD_BLOCKLIST: '["ely.su"]'
    env_file:
      - postgres.env
    <<: *x-logging
  bstats-backend-2:
    <<: *bstats-backend
    environment:
      <<: *bstats-backend-env
      SHARD_NUMBER: "1"
  bstats-backend-3:
    <<: *bstats-backend
    environment:
      <<: *bstats-backend-env
      SHARD_NUMBER: "2"
  bstats-backend-4:
    <<: *bstats-backend
    environment:
      <<: *bstats-backend-env
      SHARD_NUMBER: "3"
  bstats-backend-5:
    <<: *bstats-backend
    environment:
      <<: *bstats-backend-env
      SHARD_NUMBER: "4"
  bstats-backend-6:
    <<: *bstats-backend
    environment:
      <<: *bstats-backend-env
      SHARD_NUMBER: "5"

  # An nginx server for load balancing the backend services
  nginx-backend:
    image: nginx:latest
    restart: unless-stopped
    ulimits:
      <<: *ulimits
    volumes:
      - ./volumes/nginx-backend/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - bstats-backend-1
      - bstats-backend-2
      - bstats-backend-3
      - bstats-backend-4
      - bstats-backend-5
      - bstats-backend-6
    <<: *x-logging

  # The new bstats frontend
  bstats-web:
    build: ../bstats-web
    healthcheck:
      test: ["CMD-SHELL", "curl http://localhost:3000"]
      retries: 60
    environment:
      PORT: "3000"
    volumes:
      - "./service-account-file.json:/app/service-account-file.json"
      - "./firebase-config.json:/app/firebase-config.json"
    <<: *x-logging

  # The legacy front- and backend
  bstats-legacy:
    build: ../bstats-legacy
    healthcheck:
      test: ["CMD-SHELL", "curl http://localhost:3000"]
      retries: 60
    depends_on:
      <<: *depends_on-redis
    volumes:
      - "./volumes/bstats-legacy/config.json:/app/config.json"
    <<: *x-logging

  # The main nginx server
  nginx:
    image: nginx:1.23
    restart: unless-stopped
    ulimits:
      <<: *ulimits
    volumes:
      - ./volumes/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
    depends_on:
      - bstats-web
      - bstats-legacy
      - nginx-backend
    <<: *x-logging

  # A SQL database for historical data
  postgres:
    image: postgres:17
    command: -c 'max_connections=200'
    env_file:
      - postgres.env
    volumes:
      - ./volumes/postgres/data:/var/lib/postgresql/data
      - ./volumes/postgres/database-dump:/database-dump

  # Backup Postgres data to AWS S3. The dump must be created before the backup,
  # for example by using the following command while the database is running:
  # docker compose exec postgres bash -c "pg_dump -U bstats -Z5 -j 10 -Fd bstats -f /database-dump"
  postgres-backup:
    image: d3fk/s3cmd:stable
    profiles:
      - tools
    entrypoint: ""
    working_dir: /
    command:
      [
        "echo",
        "-e",
        "\\033[0;31mERROR\\033[0m Use \"docker compose run --rm postgres-backup ./backup.sh s3://BUCKET[/PREFIX]\" instead!",
      ]
    env_file:
      - AWS.env
    volumes:
      - ./backup.sh:/backup.sh
      - ./volumes/postgres/database-dump:/backup-src

  # Backup the Redis data to AWS S3
  redis-backup:
    image: d3fk/s3cmd:stable
    profiles:
      - tools
    entrypoint: ""
    working_dir: /
    command:
      [
        "echo",
        "-e",
        "\\033[0;31mERROR\\033[0m Use \"docker compose run --rm redis-backup ./backup.sh s3://BUCKET[/PREFIX]\" instead!",
      ]
    env_file:
      - AWS.env
    volumes:
      - ./backup.sh:/backup.sh
      - ./volumes/redis:/backup-src
