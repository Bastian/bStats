---
version: "3.8"

x-node: &x-node
  image: "node:20"
  user: ${USERID:-0}
  working_dir: /usr/src/app

services:
  # bstats-web:
  #   <<: *x-node
  #   healthcheck:
  #     test: ["CMD-SHELL", "curl http://localhost:3000"]
  #     retries: 60
  #   command: ["sh", "-c", "npm install && npm run dev"]
  #   ports:
  #     - "24678:24678"
  #   depends_on:
  #     - bstats-backend
  #     - bstats-legacy
  #   volumes:
  #     - "../bstats-web:/usr/src/app"
  #     - "./service-account-file.json:/usr/src/app/service-account-file.json"
  #     - "./firebase-config.json:/usr/src/app/firebase-config.json"

  bstats-backend:
    <<: *x-node
    command: ["sh", "-c", "npm install && npm run start:dev"]
    user: ${USERID:-0}
    environment:
      REDIS_USE_CLUSTER: "true"
      REDIS_HOST: "redis-node-1m"
      REDIS_PORT: "6379"
      PGHOST: postgres
      PGPORT: "5432"
      POSTGRES_USER: bstats
      POSTGRES_PASSWORD: bstats
      POSTGRES_DB: bstats
    depends_on: &depends_on-redis
      redis-node-1m:
        condition: service_healthy
      redis-node-2m:
        condition: service_healthy
      redis-node-3m:
        condition: service_healthy
    volumes:
      - "../bstats-backend:/usr/src/app"

  bstats-data-processor:
    build: "../bstats-data-processor"
    restart: unless-stopped
    environment:
      GEOIP_DATABASE_PATH: "todo"
      BEHIND_PROXY: "true"
      BEHIND_CLOUDFLARE_PROXY: "true"
      REDIS_CLUSTER__URLS: "redis://redis-node-1m:6379,redis://redis-node-2m:6379,redis://redis-node-3m:6379"
      WORD_BLOCKLIST: '["ely.su"]'
      WORKERS: "2"
    depends_on:
      <<: *depends_on-redis

  bstats-legacy:
    <<: *x-node
    healthcheck:
      test: ["CMD-SHELL", "curl http://localhost:3000"]
      retries: 60
    command: ["sh", "-c", "npm install && npm run start"]
    depends_on:
      - bstats-backend
    volumes:
      - "../bstats-legacy:/usr/src/app"
      - "./volumes/bstats-legacy/config.json:/usr/src/app/config.json"

  redis-node-1m: &redis-node
    image: "bitnami/redis-cluster:7.0"
    user: ${USERID:-0}
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "6379", "--raw", "incr", "ping"]
    volumes:
      - "./volumes/redis/redis.conf:/opt/bitnami/redis/mounted-etc/redis.conf"
      - "./volumes/redis/node-1m:/bitnami/redis/data"
    environment: &redis-node-env
      REDIS_CLUSTER_REPLICAS: "0"
      REDIS_NODES: "redis-node-1m redis-node-2m redis-node-3m"
      ALLOW_EMPTY_PASSWORD: "yes"
      REDIS_PASSWORD: ""
  redis-node-2m:
    <<: *redis-node
    volumes:
      - "./volumes/redis/redis.conf:/opt/bitnami/redis/mounted-etc/redis.conf"
      - "./volumes/redis/node-2m:/bitnami/redis/data"
  redis-node-3m:
    <<: *redis-node
    volumes:
      - "./volumes/redis/redis.conf:/opt/bitnami/redis/mounted-etc/redis.conf"
      - "./volumes/redis/node-3m:/bitnami/redis/data"
    depends_on:
      - redis-node-1m
      - redis-node-2m
    environment:
      <<: *redis-node-env
      REDIS_CLUSTER_CREATOR: "yes"

  redis-commander:
    container_name: redis-commander
    image: ghcr.io/joeferner/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis-node-1m:6379
    ports:
      - "8081:8081"
    depends_on:
      <<: *depends_on-redis

  caddy:
    image: caddy:2.9
    cap_add:
      - NET_ADMIN
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"
    volumes:
      - ./volumes/caddy/Caddyfile:/etc/caddy/Caddyfile:ro
    depends_on:
      # - bstats-web
      - bstats-legacy
      - bstats-backend

  postgres:
    image: postgres:17
    environment:
      POSTGRES_USER: bstats
      POSTGRES_PASSWORD: bstats
      POSTGRES_DB: bstats
    volumes:
      - "./volumes/postgres/data:/var/lib/postgresql/data"

  # WebUI to view postgres database
  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080
